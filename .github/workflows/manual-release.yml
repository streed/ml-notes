name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean
      draft:
        description: 'Create as draft'
        required: false
        default: true
        type: boolean

permissions:
  contents: write

jobs:
  release:
    name: Create Manual Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Validate version format
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if ! echo "$VERSION" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$'; then
            echo "Error: Invalid version format. Please use semantic versioning (e.g., 1.0.0 or 1.0.0-beta.1)"
            exit 1
          fi
      
      - name: Check if tag exists
        run: |
          VERSION="v${{ github.event.inputs.version }}"
          if git rev-parse "$VERSION" >/dev/null 2>&1; then
            echo "Error: Tag $VERSION already exists"
            exit 1
          fi
          echo "Tag $VERSION does not exist, proceeding..."
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"
      
      - name: Run tests
        run: |
          go test -v -race ./...
      
      - name: Build release binary
        run: |
          VERSION="${{ github.event.inputs.version }}"
          mkdir -p dist
          
          # Build Linux AMD64
          CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build \
            -ldflags "-X main.Version=${VERSION}" \
            -o dist/ml-notes-linux-amd64
          
          # Display version to verify
          ./dist/ml-notes-linux-amd64 --version
      
      - name: Create release archives
        run: |
          VERSION="v${{ github.event.inputs.version }}"
          mkdir -p dist/release
          
          # Linux AMD64
          tar -czf dist/release/ml-notes-${VERSION}-linux-amd64.tar.gz \
            -C dist ml-notes-linux-amd64 \
            --transform "s/ml-notes-linux-amd64/ml-notes/"
          
          # Create README for the release
          cat > dist/release/README.md << EOF
          # ML Notes ${VERSION}
          
          ## Installation
          
          1. Download the appropriate archive for your platform
          2. Extract the archive: \`tar -xzf ml-notes-${VERSION}-linux-amd64.tar.gz\`
          3. Move the binary to your PATH: \`sudo mv ml-notes /usr/local/bin/\`
          4. Run \`ml-notes init\` to set up your configuration
          
          ## Verification
          
          After installation, verify the version:
          \`\`\`bash
          ml-notes --version
          \`\`\`
          
          ## Checksums
          
          Verify the integrity of your download using the checksums.txt file.
          EOF
          
          # Create checksums
          cd dist/release
          sha256sum *.tar.gz > checksums.txt
      
      - name: Generate changelog
        id: changelog
        run: |
          VERSION="v${{ github.event.inputs.version }}"
          
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          echo "## Release $VERSION" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### What's Changed" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          if [ -z "$PREV_TAG" ]; then
            echo "Initial release! ðŸŽ‰" >> CHANGELOG.md
          else
            # Generate commit list since last tag
            git log ${PREV_TAG}..HEAD --pretty=format:"* %s (%h)" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREV_TAG}...${VERSION}" >> CHANGELOG.md
          fi
          
          # Output for release body
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: v${{ github.event.inputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: ${{ github.event.inputs.draft }}
          prerelease: ${{ github.event.inputs.prerelease }}
          files: |
            dist/release/*.tar.gz
            dist/release/checksums.txt
            dist/release/README.md
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Summary
        run: |
          VERSION="v${{ github.event.inputs.version }}"
          echo "## Release Created Successfully! ðŸŽ‰" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- **Draft**: ${{ github.event.inputs.draft }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Pre-release**: ${{ github.event.inputs.prerelease }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event.inputs.draft }}" = "true" ]; then
            echo "1. Review the draft release at: https://github.com/${{ github.repository }}/releases" >> $GITHUB_STEP_SUMMARY
            echo "2. Edit the release notes if needed" >> $GITHUB_STEP_SUMMARY
            echo "3. Publish the release when ready" >> $GITHUB_STEP_SUMMARY
          else
            echo "The release has been published and is now available at:" >> $GITHUB_STEP_SUMMARY
            echo "https://github.com/${{ github.repository }}/releases/tag/$VERSION" >> $GITHUB_STEP_SUMMARY
          fi